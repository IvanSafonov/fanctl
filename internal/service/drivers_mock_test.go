// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IvanSafonov/fanctl/internal/service (interfaces: FanDriver,ProfileDriver,SensorDriver)
//
// Generated by this command:
//
//	mockgen -package service -destination ./drivers_mock_test.go . FanDriver,ProfileDriver,SensorDriver
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	drivers "github.com/IvanSafonov/fanctl/internal/drivers"
	gomock "go.uber.org/mock/gomock"
)

// MockFanDriver is a mock of FanDriver interface.
type MockFanDriver struct {
	ctrl     *gomock.Controller
	recorder *MockFanDriverMockRecorder
}

// MockFanDriverMockRecorder is the mock recorder for MockFanDriver.
type MockFanDriverMockRecorder struct {
	mock *MockFanDriver
}

// NewMockFanDriver creates a new mock instance.
func NewMockFanDriver(ctrl *gomock.Controller) *MockFanDriver {
	mock := &MockFanDriver{ctrl: ctrl}
	mock.recorder = &MockFanDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFanDriver) EXPECT() *MockFanDriverMockRecorder {
	return m.recorder
}

// Defaults mocks base method.
func (m *MockFanDriver) Defaults() drivers.FanDefaults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Defaults")
	ret0, _ := ret[0].(drivers.FanDefaults)
	return ret0
}

// Defaults indicates an expected call of Defaults.
func (mr *MockFanDriverMockRecorder) Defaults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defaults", reflect.TypeOf((*MockFanDriver)(nil).Defaults))
}

// Init mocks base method.
func (m *MockFanDriver) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockFanDriverMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFanDriver)(nil).Init))
}

// SetLevel mocks base method.
func (m *MockFanDriver) SetLevel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockFanDriverMockRecorder) SetLevel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockFanDriver)(nil).SetLevel), arg0)
}

// MockProfileDriver is a mock of ProfileDriver interface.
type MockProfileDriver struct {
	ctrl     *gomock.Controller
	recorder *MockProfileDriverMockRecorder
}

// MockProfileDriverMockRecorder is the mock recorder for MockProfileDriver.
type MockProfileDriverMockRecorder struct {
	mock *MockProfileDriver
}

// NewMockProfileDriver creates a new mock instance.
func NewMockProfileDriver(ctrl *gomock.Controller) *MockProfileDriver {
	mock := &MockProfileDriver{ctrl: ctrl}
	mock.recorder = &MockProfileDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileDriver) EXPECT() *MockProfileDriverMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockProfileDriver) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockProfileDriverMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockProfileDriver)(nil).Init))
}

// State mocks base method.
func (m *MockProfileDriver) State() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockProfileDriverMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockProfileDriver)(nil).State))
}

// MockSensorDriver is a mock of SensorDriver interface.
type MockSensorDriver struct {
	ctrl     *gomock.Controller
	recorder *MockSensorDriverMockRecorder
}

// MockSensorDriverMockRecorder is the mock recorder for MockSensorDriver.
type MockSensorDriverMockRecorder struct {
	mock *MockSensorDriver
}

// NewMockSensorDriver creates a new mock instance.
func NewMockSensorDriver(ctrl *gomock.Controller) *MockSensorDriver {
	mock := &MockSensorDriver{ctrl: ctrl}
	mock.recorder = &MockSensorDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensorDriver) EXPECT() *MockSensorDriverMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockSensorDriver) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSensorDriverMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSensorDriver)(nil).Init))
}

// Value mocks base method.
func (m *MockSensorDriver) Value() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockSensorDriverMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockSensorDriver)(nil).Value))
}
